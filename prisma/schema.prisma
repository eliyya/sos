// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// generator drizzle {
//   provider = "drizzle-prisma-generator"
//   output   = "../src/lib/drizzle.ts"
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id
  name       String
  roles      BigInt   @default(2)
  created_at DateTime @default(now())
  username   String   @unique

  passwords      Password[]
  users_subjects UsersSubjects[]
  practices      Practice[]
  registered     Practice[]      @relation("registered")

  @@map("users")
}

model Password {
  id         String   @id
  user_id    String
  password   String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("passwords")
}

model Subject {
  id             String   @id
  name           String
  created_at     DateTime @default(now())
  practice_hours Int
  theory_hours   Int

  users_subjects UsersSubjects[]
  practices      Practice[]

  @@map("subjects")
}

model UsersSubjects {
  user_id    String
  subject_id String

  user    User    @relation(fields: [user_id], references: [id])
  subject Subject @relation(fields: [subject_id], references: [id])

  @@id([user_id, subject_id])
}

model Laboratory {
  id         String   @id
  created_at DateTime @default(now())
  name       String   @unique
  open_hour  Int
  close_hour Int
  common_use Boolean  @default(false)

  practices Practice[]
  machines  Machine[]
  Visits    Visit[]

  @@map("laboratories")
}

model Practice {
  id            String   @id
  user_id       String
  subject_id    String
  topic         String
  name          String
  software      String
  created_at    DateTime @default(now())
  students      Int?
  registered_by String
  laboratory_id String

  user       User       @relation(fields: [user_id], references: [id])
  subject    Subject    @relation(fields: [subject_id], references: [id])
  registered User       @relation("registered", fields: [registered_by], references: [id])
  laboratory Laboratory @relation(fields: [laboratory_id], references: [id])

  @@map("practices")
}

model Career {
  id         String    @id
  name       String    @unique
  created_at DateTime  @default(now())
  students   student[]

  @@map("careers")
}

model student {
  nc         String   @id
  lastname   String
  firstname  String
  semester   Int
  created_at DateTime @default(now())
  career_id  String

  career Career  @relation(fields: [career_id], references: [id])
  visits Visit[]

  @@map("students")
}

model Visit {
  id            String     @id
  created_at    DateTime   @default(now())
  exit_at       DateTime
  student_nc    String
  laboratory_id String
  machine_id    String
  student       student    @relation(fields: [student_nc], references: [nc])
  laboratory    Laboratory @relation(fields: [laboratory_id], references: [id])
  machine       Machine    @relation(fields: [machine_id], references: [id])

  @@map("visits")
}

enum States {
  AVAILABLE
  MAINTENANCE
}

model Machine {
  id            String   @id
  number        Int
  status        States   @default(AVAILABLE)
  processor     String
  ram           String
  storage       String
  description   String
  laboratory_id String
  created_at    DateTime @default(now())

  laboratory Laboratory @relation(fields: [laboratory_id], references: [id])
  reports    Report[]
  Visits     Visit[]

  @@map("machines")
}

model Report {
  id         String    @id
  created_at DateTime  @default(now())
  comment    String
  machine_id String
  checked_at DateTime?

  machine Machine @relation(fields: [machine_id], references: [id])

  @@map("reports")
}
