// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  role       BigInt   @default(2)
  created_at DateTime @default(now())
  username   String   @unique

  auths              Auth[]
  practices          Practice[]
  practice_registers Practice[] @relation("practice_registers")
  classes            Class[]
  sessions           Session[]
  issues             Issue[]
  comments           Comment[]

  @@map("users")
}

model Auth {
  id         Int      @id @default(autoincrement())
  user_id    Int
  password   String
  created_at DateTime @default(now())
  totp       String?

  user User @relation(fields: [user_id], references: [id])

  @@map("auths")
}

model Subject {
  id             Int      @id @default(autoincrement())
  name           String
  created_at     DateTime @default(now())
  practice_hours Int
  theory_hours   Int

  practices Practice[]
  classes   Class[]

  @@map("subjects")
}

model Session {
  id         Int      @id @default(autoincrement())
  user_id    Int
  ip         String
  expires_at DateTime
  created_at DateTime @default(now())
  browser    String
  os         String
  device     String
  model      String
  secret     String   @unique

  user User @relation(fields: [user_id], references: [id])

  @@map("sessions")
}

model Class {
  id         Int @id @default(autoincrement())
  subject_id Int
  teacher_id Int
  career_id  Int

  subject Subject @relation(fields: [subject_id], references: [id])
  teacher User    @relation(fields: [teacher_id], references: [id])
  career  Career  @relation(fields: [career_id], references: [id])

  @@map("classes")
}

model Laboratory {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  name       String   @unique
  open_hour  Int
  close_hour Int
  common_use Boolean  @default(false)

  practices Practice[]
  machines  Machine[]
  visits    Visit[]

  @@map("laboratories")
}

model Practice {
  id            Int      @id @default(autoincrement())
  user_id       Int
  subject_id    Int
  topic         String
  name          String
  created_at    DateTime @default(now())
  students      Int?
  registered_by Int
  laboratory_id Int

  user               User               @relation(fields: [user_id], references: [id])
  subject            Subject            @relation(fields: [subject_id], references: [id])
  registered_by_user User               @relation("practice_registers", fields: [registered_by], references: [id])
  laboratory         Laboratory         @relation(fields: [laboratory_id], references: [id])
  software_practices SoftwarePractice[]

  @@map("practices")
}

model Software {
  id                 Int                @id @default(autoincrement())
  name               String
  software_practices SoftwarePractice[]
  software_machines  SoftwareMachine[]

  @@map("software")
}

model SoftwarePractice {
  software_id Int
  practice_id Int

  software Software @relation(fields: [software_id], references: [id])
  practice Practice @relation(fields: [practice_id], references: [id])

  @@id([software_id, practice_id])
  @@map("software_practices")
}

model Career {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  students   Student[]
  classes    Class[]

  @@map("careers")
}

model Student {
  nc         String   @id
  lastname   String
  firstname  String
  semester   Int
  created_at DateTime @default(now())
  career_id  Int

  career Career  @relation(fields: [career_id], references: [id])
  visits Visit[]

  @@map("students")
}

model Visit {
  id            Int        @id @default(autoincrement())
  created_at    DateTime   @default(now())
  exit_at       DateTime
  student_nc    String
  laboratory_id Int
  machine_id    Int
  student       Student    @relation(fields: [student_nc], references: [nc])
  laboratory    Laboratory @relation(fields: [laboratory_id], references: [id])
  machine       Machine    @relation(fields: [machine_id], references: [id])

  @@map("visits")
}

enum States {
  AVAILABLE
  MAINTENANCE
}

model Machine {
  id            Int      @id @default(autoincrement())
  number        Int
  status        States   @default(AVAILABLE)
  processor     String
  ram           String
  storage       String
  description   String
  laboratory_id Int
  created_at    DateTime @default(now())

  laboratory        Laboratory        @relation(fields: [laboratory_id], references: [id])
  issues            Issue[]
  visits            Visit[]
  software_machines SoftwareMachine[]

  @@map("machines")
}

model SoftwareMachine {
  software_id Int
  machine_id  Int

  software Software @relation(fields: [software_id], references: [id])
  machine  Machine  @relation(fields: [machine_id], references: [id])

  @@id([software_id, machine_id])
  @@map("software_machines")
}

model Issue {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  comment    String
  machine_id Int
  closed_at  DateTime?
  user_id    Int

  machine  Machine   @relation(fields: [machine_id], references: [id])
  user     User      @relation(fields: [user_id], references: [id])
  comments Comment[]

  @@map("issue")
}

model Comment {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  content    String
  user_id    Int
  issue_id   Int

  user  User  @relation(fields: [user_id], references: [id])
  issue Issue @relation(fields: [issue_id], references: [id])

  @@map("comment")
}
